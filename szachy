#include<stdio.h>//przyjmuj¹c: 0-król, 1-hetman, 2-wie¿a, 3-goniec, 4-skoczek,
//5-pionek, 6-król_k, 7-hetman_k, 8-wie¿a_k, 9-goniec_k,
//10-skoczek_k, 11-pionek_k, 12-pole puste

int ocena(int plansza[8][8]){
int i,j,suma=0;
for(i=0;i<8;i++){
    for(j=0;j<8;j++){
        if(plansza[i][j]==0){suma=suma-1000;}
        if(plansza[i][j]==1){suma=suma-100;}
        if(plansza[i][j]==2){suma=suma-70;}
        if(plansza[i][j]==3){suma=suma-80;}
        if(plansza[i][j]==4){suma=suma-60;}
        if(plansza[i][j]==5){suma=suma-50;}
        if(plansza[i][j]==6){suma=suma+1000;}
        if(plansza[i][j]==7){suma=suma+100;}
        if(plansza[i][j]==8){suma=suma+70;}
        if(plansza[i][j]==9){suma=suma+80;}
        if(plansza[i][j]==10){suma=suma+60;}
        if(plansza[i][j]==11){suma=suma+50;}
        if(plansza[i][j]==12){suma=suma;}

    }
}
return suma;

}
void print(int plansza[8][8]){
    int i,j;
    char t[20]="KHWGSPkhwgsc-";
    for(i=0;i<8;i++){
        for(j=0;j<8;j++){
            printf("%c\t",t[plansza[i][j]]);
        }printf("\n\n");
    }
printf("\n\n");
}
int minimax(int plansza[8][8],int glebokosc,int *x,int *y,int *rx,int * ry){
    int MAX_KIER[]={8,8,4,4,8,3,8,8,4,4,8,3,0};
int MAX_ODL[]={2,8,8,8,2,2,2,8,8,8,2,2,0};
int WX[12][8]={{0,1,1,1,0,-1,-1,-1},{0,1,1,1,0,-1,-1,-1},{0,1,0,-1},{1,1,-1,-1},{1,2,2,1,-1,-2,-2,-1},{-1,0,1},{0,1,1,1,0,-1,-1,-1},{0,1,1,1,0,-1,-1,-1},{0,1,0,-1},{1,1,-1,-1},{1,2,2,1,-1,-2,-2,-1},{-1,0,1} };
int WY[12][8]={{-1,-1,0,1,1,1,0,-1},{-1,-1,0,1,1,1,0,-1},{-1,0,1,0},{-1,1,1,-1},{-2,-1,1,2,2,1,-1,-2},{-1,-1,-1},{-1,-1,0,1,1,1,0,-1},{-1,-1,0,1,1,1,0,-1},{-1,0,1,0},{-1,1,1,-1},{-2,-1,1,2,2,1,-1,-2},{1,1,1} };
int dx,dy;
int ruch_fig,bita_fig;
int px,py,prx,pry;

    int wynik=ocena(plansza);

    if(glebokosc==0||wynik>600||wynik<-600){
        return wynik;
    }
    if(glebokosc%2==0){
            int maxvalue=-1000;
            for(int i=0;i<8;i++){
                for(int j=0;j<8;j++){
                    if(plansza[i][j]>=6&&plansza[i][j]<12){
                            for(int kierunek=0;kierunek<MAX_KIER[plansza[i][j]];kierunek++){
                                    for(int odleglosc=1;odleglosc<MAX_ODL[plansza[i][j]];odleglosc++){
                                            dx=(odleglosc-1)*WX[plansza[i][j]][kierunek];
                                            dy=(odleglosc-1)*WY[plansza[i][j]][kierunek];
                                            if(odleglosc>1&&plansza[i+dx][j+dy]!=12){break;}
                                            dx=(odleglosc)*WX[plansza[i][j]][kierunek];
                                            dy=odleglosc*WY[plansza[i][j]][kierunek];
                                            if(i+dx>=0&&i+dx<=7&&j+dy>=0&&j+dy<=7){
                                                if(plansza[i+dx][j+dy]<6||plansza[i+dx][j+dy]==12){
                                                   if(plansza[i][j]!=11||plansza[i+dx][j+dy]==12&&dx==0||plansza[i+dx][j+dy]!=12&&dx!=0){
                                                    bita_fig=plansza[i+dx][j+dy];
                                                    ruch_fig=plansza[i][j];
                                                    plansza[i+dx][j+dy]=plansza[i][j];
                                                    plansza[i][j]=12;
                                                    if(j==7&&ruch_fig==11){
                                                        plansza[i+dx][j+dy]=7;
                                                    }
                                                    int score=minimax(plansza,glebokosc-1,&px,&py,&prx,&pry);
                                                    plansza[i+dx][j+dy]=bita_fig;
                                                    plansza[i][j]=ruch_fig;

                                                    if(score>maxvalue){
                                                        maxvalue=score;
                                                        *x=i;
                                                        *y=j;
                                                        *rx=dx;
                                                        *ry=dy;
                                                        printf(" %d \n",score);
                                                    }
                                                   }
                                                }


                                            }

                                    }
                            }


                    }
                }
            }
    return maxvalue;
    }
    else{
        int minvalue=1000;
        for(int i=0;i<8;i++){
                for(int j=0;j<8;j++){
                    if(plansza[i][j]<6&&plansza[i][j]>=0){
                            for(int kierunek=0;kierunek<MAX_KIER[plansza[i][j]];kierunek++){
                                    for(int odleglosc=1;odleglosc<MAX_ODL[plansza[i][j]];odleglosc++){
                                            dx=(odleglosc-1)*WX[plansza[i][j]][kierunek];
                                            dy=(odleglosc-1)*WY[plansza[i][j]][kierunek];
                                            if(odleglosc>1&&plansza[i+dx][j+dy]!=12){break;}
                                            dx=(odleglosc)*WX[plansza[i][j]][kierunek];
                                            dy=odleglosc*WY[plansza[i][j]][kierunek];
                                            if(i+dx>=0&&i+dx<=7&&j+dy>=0&&j+dy<=7){
                                                if(plansza[i+dx][j+dy]>=6||plansza[i+dx][j+dy]==12){
                                                   if(plansza[i][j]!=5||plansza[i+dx][j+dy]==12&&dx==0||plansza[i+dx][j+dy]!=12&&dx!=0){
                                                    bita_fig=plansza[i+dx][j+dy];
                                                    ruch_fig=plansza[i][j];
                                                    plansza[i+dx][j+dy]=plansza[i][j];
                                                    plansza[i][j]=12;
                                                    int score=minimax(plansza,glebokosc-1,&px,&py,&prx,&pry);
                                                    plansza[i+dx][j+dy]=bita_fig;
                                                    plansza[i][j]=ruch_fig;
                                                    if(score<minvalue){
                                                        minvalue=score;
                                                        *x=i;
                                                        *y=j;
                                                        *rx=dx;
                                                        *ry=dy;
                                                    }
                                                   }
                                                }


                                            }

                                    }
                            }


                    }
                }
            }
    return minvalue;
    }
    }



void game(){
int a,b,c,d,x,y,Rx,Ry,w=0;
int zw=0;
int plansza[8][8]={{8,11,12,12,12,12,5,2},{10,11,12,12,12,12,5,4},{9,11,12,12,12,12,5,3},{7,11,12,12,12,12,5,0},{6,11,12,12,12,12,5,1},{9,11,12,12,12,12,5,3},{10,11,12,12,12,12,5,4},{8,11,12,12,12,12,5,2}};
while (1){

print(plansza);
if(zw==1){
            printf("\nCzarne wygraly");
            break;
        }
printf("Wybierz ruch");
scanf("%d %d %d %d",&a,&b,&c,&d);
if(plansza[a][b]>5||plansza[a+c][b+d]<6||a+c<0||a+c>7||b+d<0||b+d>7){continue;}
plansza[a+c][b+d]=plansza[a][b];
plansza[a][b]=12;
for(;w<8;w++){
    if(plansza[w][0]==5){
        plansza[w][0]=1;
    }
}
print(plansza);
minimax(plansza,4,&x,&y,&Rx,&Ry);
plansza[x+Rx][y+Ry]=plansza[x][y];
plansza[x][y]=12;
//if(plansza[x+Rx][y+Ry]==0){
    //zw=1;
//}
for(w=0,zw=1;w<8;w++){
    for(int l=0;l<8;l++){
        if(plansza[w][l]==0){
            zw++;
        }
    }
}
for(;w<8;w++){
    if(plansza[w][7]==11){
        plansza[w][7]=7;
    }
}

}
}
















int main(){//przyjmuj¹c: 0-król, 1-hetman, 2-wie¿a, 3-goniec, 4-skoczek,
//5-pionek, 6-król_k, 7-hetman_k, 8-wie¿a_k, 9-goniec_k,
//10-skoczek_k, 11-pionek_k, 12-pole puste
int szachy[8][8]={{8,11,12,12,12,12,5,2},{10,11,12,12,12,12,5,4},{9,11,12,12,12,12,5,3},{7,11,12,12,12,12,5,0},{6,11,12,12,12,12,5,1},{9,11,12,12,12,12,5,3},{10,11,12,12,12,12,5,4},{8,11,12,12,12,12,5,2}};
game(szachy);



return 0;
}
